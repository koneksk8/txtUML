package pingpong.x.model;

// Classes

class Game {
 
	public Game() {
		Player left = create(Player, "Left ");
		Player right = create(Player, "Right");

		link(LeftPlayer.inGame, this, LeftPlayer.player, left);
		link(RightPlayer.inGame, this, RightPlayer.player, right);

		connect(Table.left, left->(Player.BallAtPlayerPort), Table.right,
				right->(Player.BallAtPlayerPort));

		start(left);
		start(right);
		
	}

	initial Init;

	state Waiting;

	transition Initialize {
		from Init;
		to Waiting;
	}

	transition StartGame {
		from Waiting;
		to Waiting;
		trigger Ball;
		effect {
			Player left = this->(LeftPlayer.player).selectAny();
			send trigger to left;		
		}
	}
}

class Player {

	private String name;

	port BallAtPlayerPort {
		required BallIfc;
		provided BallIfc;
	}

	behavior port ShoutPort {
		required HitOrMissIfc;
	}

	public Player(String name) {
		this.name = name;

		Racket racket = create(Racket);
		link(PlayerOwnsRacket.player, Player.this, PlayerOwnsRacket.racket, racket);
		connect(this->(Player.BallAtPlayerPort), PlayerUsesRacket.racket,
				racket->(Racket.BallAtRacketPort));
		connect(this->(Player.ShoutPort), PlayerHitsOrMisses.withRacket, racket->(Racket.HitOrMissPort));

		start(racket);
	}

	initial Init;

	state Waiting;

	transition Initialize {
		from Init;
		to Waiting;
	}

	transition ShoutAfterHittingTheBall {
		from Waiting;
		to Waiting;
		trigger HitTheBall;
		effect {
			log(name + ": \"HIT!\"");			
		}
	}

	transition ShoutAfterMissingTheBall {
		from Waiting;
		to Waiting;
		trigger MissedTheBall;
		effect {
			log(name + ": \"MISS! I lost...\"");			
		}
	}

	transition Serve {
		from Waiting;
		to Waiting;
		trigger Ball;
		effect {
			log(name + ": \"I'll serve now...!\"");
			send trigger to this->(PlayerOwnsRacket.racket).selectAny();
		}
	}	
}

class Racket {

	behavior port BallAtRacketPort {
		required BallIfc;
		provided BallIfc;
	}

	behavior port HitOrMissPort {
		required HitOrMissIfc;
	}
	
	initial Init;

	state Waiting;

	transition Initialize {
		from Init;
		to Waiting;
	}

	choice Check;

	transition ReceiveBall {
		from Waiting;
		to Check;
		trigger Ball;
	}

	transition CanHit {
		from Check;
		to Waiting;
		guard (trigger.countdown > 0)

		effect {
			Ball ball = trigger;
			 
			send new Ball(ball.countdown - 1) to this->(Racket.BallAtRacketPort);
			send new HitTheBall() to this->(Racket.HitOrMissPort);
		}

	}

	transition CannotHit {
		from Check;
		to Waiting;
		guard (else)

		effect {
			send new MissedTheBall() to this->(Racket.HitOrMissPort);
		}

	}

}

// Signals and interfaces

signal Ball {
	public int countdown;
}

signal HitTheBall;

signal MissedTheBall;

interface BallIfc {
	reception Ball;
}

interface HitOrMissIfc {
	reception HitTheBall;
	reception MissedTheBall;
}

// Associations

composition LeftPlayer {
	hidden container Game inGame;
	1 Player player;
}

composition RightPlayer {
	hidden container Game inGame;
	1 Player player;
}

composition PlayerOwnsRacket {
	hidden container Player player;
	1 Racket racket;
}

// Connectors

connector Table { // assembly connector
	LeftPlayer.player->Player.BallAtPlayerPort left;
	RightPlayer.player->Player.BallAtPlayerPort right;
}

delegation PlayerUsesRacket {
	PlayerOwnsRacket.player->Player.BallAtPlayerPort player;
	PlayerOwnsRacket.racket->Racket.BallAtRacketPort racket;
}

delegation PlayerHitsOrMisses {
	PlayerOwnsRacket.player->Player.ShoutPort player;
	PlayerOwnsRacket.racket->Racket.HitOrMissPort withRacket;
}

